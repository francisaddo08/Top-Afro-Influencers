// <auto-generated />
using System;
using Afro.Ranking.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Afro.Ranking.Persistance.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.CityMapData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BoundSWLong")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsNELat")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsNELong")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsSWLat")
                        .HasColumnType("float");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<double?>("LocationLat")
                        .HasColumnType("float");

                    b.Property<double?>("LocationLong")
                        .HasColumnType("float");

                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ViewPortNELat")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortNELong")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortSWLat")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortSWLong")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("City");
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.CountryMapData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BoundSWLong")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsNELat")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsNELong")
                        .HasColumnType("float");

                    b.Property<double?>("BoundsSWLat")
                        .HasColumnType("float");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<double?>("LocationLat")
                        .HasColumnType("float");

                    b.Property<double?>("LocationLong")
                        .HasColumnType("float");

                    b.Property<string>("PlaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ViewPortNELat")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortNELong")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortSWLat")
                        .HasColumnType("float");

                    b.Property<double?>("ViewPortSWLong")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("Country");
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.FaceBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<long>("Likes")
                        .HasColumnType("bigint");

                    b.Property<long>("TalkingAbout")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("FaceBook");
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.Influencer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFaceBook")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInstagram")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwitter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsYouTube")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Influencer");
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.Instagram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageComments")
                        .HasColumnType("float");

                    b.Property<long>("AverageLikes")
                        .HasColumnType("bigint");

                    b.Property<double>("EngagementRate")
                        .HasColumnType("float");

                    b.Property<long>("Followers")
                        .HasColumnType("bigint");

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("Instagram");
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.TikTok", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Followers")
                        .HasColumnType("bigint");

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("TikTok");
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.Twitter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Followers")
                        .HasColumnType("bigint");

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("Twitter");
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.YouTube", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfluencerId")
                        .HasColumnType("int");

                    b.Property<long>("Subscribers")
                        .HasColumnType("bigint");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InfluencerId")
                        .IsUnique();

                    b.ToTable("YouTube");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.CityMapData", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Influencer", null)
                        .WithOne("CityMapData")
                        .HasForeignKey(" Afro.Ranking.Persistance.Entities.CityMapData", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.CountryMapData", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Influencer", null)
                        .WithOne("MapData")
                        .HasForeignKey(" Afro.Ranking.Persistance.Entities.CountryMapData", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.FaceBook", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Influencer", null)
                        .WithOne("FaceBook")
                        .HasForeignKey(" Afro.Ranking.Persistance.Entities.FaceBook", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.Instagram", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Influencer", null)
                        .WithOne("Instagram")
                        .HasForeignKey(" Afro.Ranking.Persistance.Entities.Instagram", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.TikTok", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Influencer", null)
                        .WithOne("TikTok")
                        .HasForeignKey(" Afro.Ranking.Persistance.Entities.TikTok", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.Twitter", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Influencer", null)
                        .WithOne("Twitter")
                        .HasForeignKey(" Afro.Ranking.Persistance.Entities.Twitter", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.YouTube", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Influencer", null)
                        .WithOne("YouTube")
                        .HasForeignKey(" Afro.Ranking.Persistance.Entities.YouTube", "InfluencerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne(" Afro.Ranking.Persistance.Entities.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne(" Afro.Ranking.Persistance.Entities.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity(" Afro.Ranking.Persistance.Entities.Influencer", b =>
                {
                    b.Navigation("CityMapData");

                    b.Navigation("FaceBook");

                    b.Navigation("Instagram");

                    b.Navigation("MapData");

                    b.Navigation("TikTok");

                    b.Navigation("Twitter");

                    b.Navigation("YouTube");
                });
#pragma warning restore 612, 618
        }
    }
}
